package sanchez.jdbc.pool;

/*
* @version     1.0  Spet. 28 1999
* @author      Quansheng Jia 
* @see         java.sql.Connection
*
<P>
A ConnectionEventListener is an object that registers to receive 
events generated by a PooledConnection.
<P>
The ConnectionEventListener interface is implemented by a
connection pooling component.  A connection pooling component will
usually be provided by a JDBC driver vendor, or another system software
vendor.  A ConnectionEventListener is notified by a JDBC driver when
an application is finished using its Connection object.  This event occurs
after the application calls close on its representation of the
PooledConnection.  A ConnectionEventListener is also notified when a
Connection error occurs due to the fact that the PooledConnection is unfit
for future use---the server has crashed, for example.  The listener is
notified, by the JDBC driver, just before the driver throws an
SQLException to the application using the PooledConnection.
*
*/

import java.sql.SQLException;
import javax.sql.ConnectionEvent;
import javax.sql.ConnectionEventListener;
import javax.sql.DataSource;
import javax.sql.PooledConnection;

public class ScConnectionEvenListener
        implements ConnectionEventListener {

    static final int _CLOSED_EVENT = 1;
    static final int _ERROROCCURED_EVENT = 2;
    private DataSource ds;

    public ScConnectionEvenListener() {
        ds = null;
    }

    public ScConnectionEvenListener(DataSource d) {
        ds = d;
    }

    /**
     * <P>Invoked when the application calls close() on its
     * representation of the connection.
     *
     * @param event an event object describing the source of
     *              the event
     */
    public void connectionClosed(ConnectionEvent event) {
        try {
            if (ds != null && (ds instanceof ScJDBCConnectionPoolCache))
                ((ScJDBCConnectionPoolCache) ds).reusePooledConnection((PooledConnection) event.getSource());
        } catch (SQLException _ex) {
        }
    }

    /**
     * <p>Invoked when a fatal connection error occurs, just before
     * an SQLException is thrown to the application.
     *
     * @param event an event object describing the source of
     *              the event
     */
    public void connectionErrorOccurred(ConnectionEvent event) {
        try {
            if (ds != null && (ds instanceof ScJDBCConnectionPoolCache))
                ((ScJDBCConnectionPoolCache) ds).closePooledConnection((PooledConnection) event.getSource());
        } catch (SQLException _ex) {
        }

    }


}

